//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gRPC/content_impression.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol ContentImpression_ContentImpressionBatchLogsCall: ClientCallUnary {}

fileprivate final class ContentImpression_ContentImpressionBatchLogsCallBase: ClientCallUnaryBase<ContentImpression_BatchLogRequest, ContentImpression_BatchLogResponse>, ContentImpression_ContentImpressionBatchLogsCall {
  override class var method: String { return "/content_impression.ContentImpression/BatchLogs" }
}


/// Instantiate ContentImpression_ContentImpressionServiceClient, then call methods of this protocol to make API calls.
internal protocol ContentImpression_ContentImpressionService: ServiceClient {
  /// Synchronous. Unary.
  func batchLogs(_ request: ContentImpression_BatchLogRequest) throws -> ContentImpression_BatchLogResponse
  /// Asynchronous. Unary.
  func batchLogs(_ request: ContentImpression_BatchLogRequest, completion: @escaping (ContentImpression_BatchLogResponse?, CallResult) -> Void) throws -> ContentImpression_ContentImpressionBatchLogsCall

}

internal final class ContentImpression_ContentImpressionServiceClient: ServiceClientBase, ContentImpression_ContentImpressionService {
  /// Synchronous. Unary.
  internal func batchLogs(_ request: ContentImpression_BatchLogRequest) throws -> ContentImpression_BatchLogResponse {
    return try ContentImpression_ContentImpressionBatchLogsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func batchLogs(_ request: ContentImpression_BatchLogRequest, completion: @escaping (ContentImpression_BatchLogResponse?, CallResult) -> Void) throws -> ContentImpression_ContentImpressionBatchLogsCall {
    return try ContentImpression_ContentImpressionBatchLogsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

